import{_ as s,o as a,c as e,Q as n}from"./chunks/framework.a4cb5da9.js";const o="/Docs/assets/net-img-asynccode-20230918205917-kznkm7t.0d96e7d2.png",l="/Docs/assets/net-img-asynccode-20230918205918-y0oaxp3.9395a90f.png",p="/Docs/assets/net-img-asynccode-20230918205919-7nbcq5d.daa0ff96.png",t="/Docs/assets/net-img-asynccode-20230918205920-8bcdn36.70d272bb.png",c="/Docs/assets/net-img-asynccode-20230918205922-6c20c7m.39be3e27.png",r="/Docs/assets/net-img-asynccode-20230918205923-l7vru1s.f25541d8.png",k=JSON.parse('{"title":"断言的设计","description":"","frontmatter":{},"headers":[],"relativePath":"docs/断言的设计.md/断言的设计.md","filePath":"docs/断言的设计.md/断言的设计.md"}'),i={name:"docs/断言的设计.md/断言的设计.md"},y=n(`<h1 id="断言的设计" tabindex="-1">断言的设计 <a class="header-anchor" href="#断言的设计" aria-label="Permalink to &quot;断言的设计&quot;">​</a></h1><h2 id="一、支持的断言方法" tabindex="-1">一、支持的断言方法 <a class="header-anchor" href="#一、支持的断言方法" aria-label="Permalink to &quot;一、支持的断言方法&quot;">​</a></h2><ul><li>equal</li><li>not_equal</li><li>is_</li><li>is_not</li><li>is_in</li><li>is_not_in</li><li>is_instance</li><li>is_not_instance</li><li>greater</li><li>greater_equal</li><li>less</li><li>less_equal</li><li>match</li><li>key_is_exsit</li><li>key_is_not_exsit</li></ul><h2 id="二、check支持的2种方式" tabindex="-1">二、check支持的2种方式 <a class="header-anchor" href="#二、check支持的2种方式" aria-label="Permalink to &quot;二、check支持的2种方式&quot;">​</a></h2><h3 id="_1、左右式断言" tabindex="-1">1、左右式断言 <a class="header-anchor" href="#_1、左右式断言" aria-label="Permalink to &quot;1、左右式断言&quot;">​</a></h3><div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 代表1==1</span></span>
<span class="line"><span style="color:#E1E4E8;">check.equal(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 代表从response中获取payments的值，应该大于1</span></span>
<span class="line"><span style="color:#E1E4E8;">check.greater(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.session.response[</span><span style="color:#9ECBFF;">&quot;result&quot;</span><span style="color:#E1E4E8;">][</span><span style="color:#9ECBFF;">&quot;payments&quot;</span><span style="color:#E1E4E8;">]), </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 代表从response的code的值，应该等于 参数化的test_data中写的预期code</span></span>
<span class="line"><span style="color:#E1E4E8;">check.equal(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.session.response[</span><span style="color:#9ECBFF;">&quot;code&quot;</span><span style="color:#E1E4E8;">], </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.expect[</span><span style="color:#9ECBFF;">&quot;exp_code&quot;</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 代表1==1</span></span>
<span class="line"><span style="color:#24292E;">check.equal(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 代表从response中获取payments的值，应该大于1</span></span>
<span class="line"><span style="color:#24292E;">check.greater(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.session.response[</span><span style="color:#032F62;">&quot;result&quot;</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&quot;payments&quot;</span><span style="color:#24292E;">]), </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 代表从response的code的值，应该等于 参数化的test_data中写的预期code</span></span>
<span class="line"><span style="color:#24292E;">check.equal(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.session.response[</span><span style="color:#032F62;">&quot;code&quot;</span><span style="color:#24292E;">], </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.expect[</span><span style="color:#032F62;">&quot;exp_code&quot;</span><span style="color:#24292E;">])</span></span></code></pre></div><h3 id="_2、jsonpath式断言" tabindex="-1">2、JsonPath式断言 <a class="header-anchor" href="#_2、jsonpath式断言" aria-label="Permalink to &quot;2、JsonPath式断言&quot;">​</a></h3><div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 代表response中的ret_code，然后应该等于0</span></span>
<span class="line"><span style="color:#E1E4E8;">check.equal(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.session.response, {</span><span style="color:#9ECBFF;">&#39;ret_code&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 代表从response中分别提取retCode，retMsg，id，并等于相应的值</span></span>
<span class="line"><span style="color:#E1E4E8;">check.equal(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.session.response, {</span><span style="color:#9ECBFF;">&quot;$..retCode&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">4004</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;$..retMsg&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;route not found&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;$..id&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;11&quot;</span><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 代表response中的ret_code，然后应该等于0</span></span>
<span class="line"><span style="color:#24292E;">check.equal(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.session.response, {</span><span style="color:#032F62;">&#39;ret_code&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 代表从response中分别提取retCode，retMsg，id，并等于相应的值</span></span>
<span class="line"><span style="color:#24292E;">check.equal(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.session.response, {</span><span style="color:#032F62;">&quot;$..retCode&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">4004</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;$..retMsg&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;route not found&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;$..id&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;11&quot;</span><span style="color:#24292E;">})</span></span></code></pre></div><h2 id="三、-推荐-在独立的断言层写断言-然后在service或case层调用" tabindex="-1">三、[推荐] 在独立的断言层写断言，然后在Service或Case层调用 <a class="header-anchor" href="#三、-推荐-在独立的断言层写断言-然后在service或case层调用" aria-label="Permalink to &quot;三、[推荐] 在独立的断言层写断言，然后在Service或Case层调用&quot;">​</a></h2><h3 id="_1-check-py中-进行断言的编写" tabindex="-1">1）Check.py中，进行断言的编写 <a class="header-anchor" href="#_1-check-py中-进行断言的编写" aria-label="Permalink to &quot;1）Check.py中，进行断言的编写&quot;">​</a></h3><p>把断言集中抽离出来，一方面代码会感觉整洁，再一方面一些相同的断言可以抽象出来。</p><p>​<img src="`+o+'" alt="">​</p><p>格式如上，记得每个断言方法<code>return self</code>​哦。</p><h3 id="_2-断言方法写好之后-可以在service层使用。如下" tabindex="-1">2）断言方法写好之后，可以在Service层使用。如下 <a class="header-anchor" href="#_2-断言方法写好之后-可以在service层使用。如下" aria-label="Permalink to &quot;2）断言方法写好之后，可以在Service层使用。如下&quot;">​</a></h3><p>​<img src="'+l+'" alt="">​</p><h3 id="_3-也可以在case层使用。" tabindex="-1">3）也可以在Case层使用。 <a class="header-anchor" href="#_3-也可以在case层使用。" aria-label="Permalink to &quot;3）也可以在Case层使用。&quot;">​</a></h3><p>​<img src="'+p+'" alt="">​</p><h2 id="四、-不推荐-直接在bizservice层写断言-不推荐" tabindex="-1">四、[不推荐]直接在BizService层写断言（不推荐） <a class="header-anchor" href="#四、-不推荐-直接在bizservice层写断言-不推荐" aria-label="Permalink to &quot;四、[不推荐]直接在BizService层写断言（不推荐）&quot;">​</a></h2><p>​<img src="'+t+'" alt="">​</p><h2 id="五、-很不推荐-直接在testcase层写断言-不推荐" tabindex="-1">五、[很不推荐]直接在TestCase层写断言（不推荐） <a class="header-anchor" href="#五、-很不推荐-直接在testcase层写断言-不推荐" aria-label="Permalink to &quot;五、[很不推荐]直接在TestCase层写断言（不推荐）&quot;">​</a></h2><p>​<img src="'+c+`" alt="">​</p><h2 id="六、请勿使用的写法" tabindex="-1">六、请勿使用的写法 <a class="header-anchor" href="#六、请勿使用的写法" aria-label="Permalink to &quot;六、请勿使用的写法&quot;">​</a></h2><p>请勿使用assert来直接写断言，因为这样写，不会在日志和报告中显示，并且丢失了很多框架特性</p><div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> session.response[</span><span style="color:#9ECBFF;">&quot;code&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> session.response[</span><span style="color:#9ECBFF;">&quot;msg&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;success&quot;</span></span>
<span class="line"><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> session.response[</span><span style="color:#9ECBFF;">&quot;amount&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10.1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> session.response[</span><span style="color:#032F62;">&quot;code&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> session.response[</span><span style="color:#032F62;">&quot;msg&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;success&quot;</span></span>
<span class="line"><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> session.response[</span><span style="color:#032F62;">&quot;amount&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10.1</span></span></code></pre></div><h2 id="七、断言中可以取到的变量" tabindex="-1">七、断言中可以取到的变量 <a class="header-anchor" href="#七、断言中可以取到的变量" aria-label="Permalink to &quot;七、断言中可以取到的变量&quot;">​</a></h2><ul><li>​<code>self.session.request</code>​ 取到请求参数</li><li>​<code>self.session.response</code>​ 取到响应内容</li><li>​<code>self.test_data</code>​ 渠道参数化的值</li><li>​<code>self.test_data, self.info, self.expect, self.user</code>​</li></ul><h2 id="八、在报告中的展示" tabindex="-1">八、在报告中的展示 <a class="header-anchor" href="#八、在报告中的展示" aria-label="Permalink to &quot;八、在报告中的展示&quot;">​</a></h2><p>​<img src="`+r+'" alt="">​</p><h2 id="九、断言失败-不影响后续代码执行" tabindex="-1">九、断言失败，不影响后续代码执行 <a class="header-anchor" href="#九、断言失败-不影响后续代码执行" aria-label="Permalink to &quot;九、断言失败，不影响后续代码执行&quot;">​</a></h2><blockquote><p>默认情况下，多个断言中，某一个断言失败，就认为整个case失败了。也不会继续运行下去了。</p></blockquote><blockquote><p>但也有一些业务场景，需要某个断言失败，想继续跑下面的断言or代码，于是有了以下设计。</p></blockquote><ul><li>默认在pytest.ini 做了 <code>--check-max-fail=1</code>​ 的配置，断言失败，不继续运行。</li><li>如果想断言失败继续执行，可以在命令行运行时候加上 <code>--check-max-fail=0</code>​</li></ul>',32),E=[y];function d(u,h,q,_,F,m){return a(),e("div",null,E)}const b=s(i,[["render",d]]);export{k as __pageData,b as default};
